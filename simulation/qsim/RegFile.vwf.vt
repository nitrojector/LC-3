// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/08/2023 12:01:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RegFile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegFile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] BUS;
reg [2:0] DR;
reg [2:0] SR1;
reg [2:0] SR2;
reg clk;
reg regWE;
reg rst;
// wires                                               
wire [15:0] R1;
wire [15:0] R2;

// assign statements (if any)                          
RegFile i1 (
// port map - connection between master ports and signals/registers   
	.BUS(BUS),
	.DR(DR),
	.R1(R1),
	.R2(R2),
	.SR1(SR1),
	.SR2(SR2),
	.clk(clk),
	.regWE(regWE),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 
// DR[ 2 ]
always
begin
	DR[2] = 1'b0;
	DR[2] = #100000 1'b1;
	#100000;
end 
// DR[ 1 ]
always
begin
	DR[1] = 1'b0;
	DR[1] = #50000 1'b1;
	#50000;
end 
// DR[ 0 ]
always
begin
	DR[0] = 1'b0;
	DR[0] = #25000 1'b1;
	#25000;
end 
// BUS[ 15 ]
initial
begin
	BUS[15] = 1'b0;
end 
// BUS[ 14 ]
initial
begin
	BUS[14] = 1'b0;
end 
// BUS[ 13 ]
initial
begin
	BUS[13] = 1'b0;
end 
// BUS[ 12 ]
initial
begin
	BUS[12] = 1'b0;
end 
// BUS[ 11 ]
initial
begin
	BUS[11] = 1'b0;
end 
// BUS[ 10 ]
initial
begin
	BUS[10] = 1'b0;
end 
// BUS[ 9 ]
initial
begin
	BUS[9] = 1'b0;
end 
// BUS[ 8 ]
initial
begin
	BUS[8] = 1'b0;
end 
// BUS[ 7 ]
initial
begin
	BUS[7] = 1'b0;
end 
// BUS[ 6 ]
initial
begin
	BUS[6] = 1'b0;
	BUS[6] = #640000 1'b1;
end 
// BUS[ 5 ]
initial
begin
	BUS[5] = 1'b0;
	BUS[5] = #320000 1'b1;
	BUS[5] = #320000 1'b0;
	BUS[5] = #320000 1'b1;
end 
// BUS[ 4 ]
initial
begin
	repeat(3)
	begin
		BUS[4] = 1'b0;
		BUS[4] = #160000 1'b1;
		# 160000;
	end
	BUS[4] = 1'b0;
end 
// BUS[ 3 ]
initial
begin
	repeat(6)
	begin
		BUS[3] = 1'b0;
		BUS[3] = #80000 1'b1;
		# 80000;
	end
	BUS[3] = 1'b0;
end 
// BUS[ 2 ]
initial
begin
	repeat(12)
	begin
		BUS[2] = 1'b0;
		BUS[2] = #40000 1'b1;
		# 40000;
	end
	BUS[2] = 1'b0;
end 
// BUS[ 1 ]
always
begin
	BUS[1] = 1'b0;
	BUS[1] = #20000 1'b1;
	#20000;
end 
// BUS[ 0 ]
always
begin
	BUS[0] = 1'b0;
	BUS[0] = #10000 1'b1;
	#10000;
end 
// SR1[ 2 ]
always
begin
	SR1[2] = 1'b0;
	SR1[2] = #500000 1'b1;
	#500000;
end 
// SR1[ 1 ]
always
begin
	SR1[1] = 1'b0;
	SR1[1] = #250000 1'b1;
	#250000;
end 
// SR1[ 0 ]
always
begin
	SR1[0] = 1'b0;
	SR1[0] = #125000 1'b1;
	#125000;
end 
// SR2[ 2 ]
initial
begin
	SR2[2] = 1'b0;
	SR2[2] = #250000 1'b1;
	SR2[2] = #500000 1'b0;
end 
// SR2[ 1 ]
always
begin
	SR2[1] = 1'b1;
	SR2[1] = #250000 1'b0;
	#250000;
end 
// SR2[ 0 ]
always
begin
	SR2[0] = 1'b0;
	SR2[0] = #125000 1'b1;
	#125000;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// regWE
initial
begin
	regWE = 1'b0;
	regWE = #40000 1'b1;
	regWE = #50000 1'b0;
	regWE = #80000 1'b1;
	regWE = #150000 1'b0;
	regWE = #70000 1'b1;
	regWE = #80000 1'b0;
	regWE = #100000 1'b1;
	regWE = #180000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #510000 1'b1;
	rst = #20000 1'b0;
end 
endmodule

