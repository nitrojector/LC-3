// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/15/2023 20:49:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EAB
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EAB_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] IR;
reg [15:0] PC;
reg [15:0] SR1;
reg selADDR1MUX;
reg [1:0] selADDR2MUX;
// wires                                               
wire [15:0] ADDROut;

// assign statements (if any)                          
EAB i1 (
// port map - connection between master ports and signals/registers   
	.ADDROut(ADDROut),
	.IR(IR),
	.PC(PC),
	.SR1(SR1),
	.selADDR1MUX(selADDR1MUX),
	.selADDR2MUX(selADDR2MUX)
);
initial 
begin 
#1000000 $finish;
end 
// IR[ 15 ]
initial
begin
	IR[15] = 1'b0;
end 
// IR[ 14 ]
initial
begin
	IR[14] = 1'b0;
end 
// IR[ 13 ]
initial
begin
	IR[13] = 1'b0;
end 
// IR[ 12 ]
initial
begin
	IR[12] = 1'b0;
end 
// IR[ 11 ]
initial
begin
	IR[11] = 1'b0;
end 
// IR[ 10 ]
initial
begin
	IR[10] = 1'b0;
	IR[10] = #530000 1'b1;
	IR[10] = #120000 1'b0;
end 
// IR[ 9 ]
initial
begin
	IR[9] = 1'b0;
	IR[9] = #400000 1'b1;
	IR[9] = #250000 1'b0;
end 
// IR[ 8 ]
initial
begin
	IR[8] = 1'b0;
	IR[8] = #290000 1'b1;
	IR[8] = #110000 1'b0;
end 
// IR[ 7 ]
initial
begin
	IR[7] = 1'b0;
	IR[7] = #190000 1'b1;
	IR[7] = #460000 1'b0;
end 
// IR[ 6 ]
initial
begin
	IR[6] = 1'b0;
	IR[6] = #190000 1'b1;
	IR[6] = #460000 1'b0;
end 
// IR[ 5 ]
initial
begin
	IR[5] = 1'b0;
	IR[5] = #90000 1'b1;
	IR[5] = #100000 1'b0;
end 
// IR[ 4 ]
initial
begin
	IR[4] = 1'b1;
	IR[4] = #650000 1'b0;
end 
// IR[ 3 ]
initial
begin
	IR[3] = 1'b0;
end 
// IR[ 2 ]
initial
begin
	IR[2] = 1'b1;
	IR[2] = #650000 1'b0;
end 
// IR[ 1 ]
initial
begin
	IR[1] = 1'b1;
	IR[1] = #650000 1'b0;
end 
// IR[ 0 ]
initial
begin
	IR[0] = 1'b0;
end 
// PC[ 15 ]
initial
begin
	PC[15] = 1'b0;
end 
// PC[ 14 ]
initial
begin
	PC[14] = 1'b0;
end 
// PC[ 13 ]
initial
begin
	PC[13] = 1'b0;
end 
// PC[ 12 ]
initial
begin
	PC[12] = 1'b0;
end 
// PC[ 11 ]
initial
begin
	PC[11] = 1'b0;
end 
// PC[ 10 ]
initial
begin
	PC[10] = 1'b0;
end 
// PC[ 9 ]
initial
begin
	PC[9] = 1'b0;
end 
// PC[ 8 ]
initial
begin
	PC[8] = 1'b0;
end 
// PC[ 7 ]
initial
begin
	PC[7] = 1'b0;
end 
// PC[ 6 ]
initial
begin
	PC[6] = 1'b0;
end 
// PC[ 5 ]
initial
begin
	PC[5] = 1'b0;
end 
// PC[ 4 ]
initial
begin
	PC[4] = 1'b0;
end 
// PC[ 3 ]
initial
begin
	PC[3] = 1'b0;
end 
// PC[ 2 ]
initial
begin
	PC[2] = 1'b0;
end 
// PC[ 1 ]
initial
begin
	PC[1] = 1'b0;
end 
// PC[ 0 ]
initial
begin
	PC[0] = 1'b1;
end 
// SR1[ 15 ]
initial
begin
	SR1[15] = 1'b0;
end 
// SR1[ 14 ]
initial
begin
	SR1[14] = 1'b0;
end 
// SR1[ 13 ]
initial
begin
	SR1[13] = 1'b0;
end 
// SR1[ 12 ]
initial
begin
	SR1[12] = 1'b0;
end 
// SR1[ 11 ]
initial
begin
	SR1[11] = 1'b0;
end 
// SR1[ 10 ]
initial
begin
	SR1[10] = 1'b0;
end 
// SR1[ 9 ]
initial
begin
	SR1[9] = 1'b0;
end 
// SR1[ 8 ]
initial
begin
	SR1[8] = 1'b0;
end 
// SR1[ 7 ]
initial
begin
	SR1[7] = 1'b0;
end 
// SR1[ 6 ]
initial
begin
	SR1[6] = 1'b0;
end 
// SR1[ 5 ]
initial
begin
	SR1[5] = 1'b0;
end 
// SR1[ 4 ]
initial
begin
	SR1[4] = 1'b0;
end 
// SR1[ 3 ]
initial
begin
	SR1[3] = 1'b0;
end 
// SR1[ 2 ]
initial
begin
	SR1[2] = 1'b0;
end 
// SR1[ 1 ]
initial
begin
	SR1[1] = 1'b1;
end 
// SR1[ 0 ]
initial
begin
	SR1[0] = 1'b0;
end 

// selADDR1MUX
always
begin
	selADDR1MUX = 1'b0;
	selADDR1MUX = #25000 1'b1;
	#25000;
end 
// selADDR2MUX[ 1 ]
initial
begin
	selADDR2MUX[1] = 1'b0;
	selADDR2MUX[1] = #190000 1'b1;
	selADDR2MUX[1] = #460000 1'b0;
end 
// selADDR2MUX[ 0 ]
initial
begin
	selADDR2MUX[0] = 1'b1;
	selADDR2MUX[0] = #190000 1'b0;
	selADDR2MUX[0] = #210000 1'b1;
	selADDR2MUX[0] = #250000 1'b0;
end 
endmodule

