// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/16/2023 10:27:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] BUS;
reg clk;
reg clkExt;
reg ldMAR;
reg ldMDR;
reg [15:0] memAddrExt;
reg [15:0] memDataExt;
reg memWE;
reg memWEExt;
reg rst;
reg selMDR;
// wires                                               
wire [15:0] MAROutD;
wire [15:0] MDRInD;
wire [15:0] MDROut;
wire [15:0] MDROutD;
wire [15:0] memOutD;
wire [15:0] memOutExt;

// assign statements (if any)                          
RAM i1 (
// port map - connection between master ports and signals/registers   
	.BUS(BUS),
	.MAROutD(MAROutD),
	.MDRInD(MDRInD),
	.MDROut(MDROut),
	.MDROutD(MDROutD),
	.clk(clk),
	.clkExt(clkExt),
	.ldMAR(ldMAR),
	.ldMDR(ldMDR),
	.memAddrExt(memAddrExt),
	.memDataExt(memDataExt),
	.memOutD(memOutD),
	.memOutExt(memOutExt),
	.memWE(memWE),
	.memWEExt(memWEExt),
	.rst(rst),
	.selMDR(selMDR)
);
initial 
begin 
#1000000 $finish;
end 

// rst
initial
begin
	rst = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// BUS[ 15 ]
initial
begin
	BUS[15] = 1'b0;
	BUS[15] = #70000 1'b1;
	BUS[15] = #80000 1'b0;
end 
// BUS[ 14 ]
initial
begin
	BUS[14] = 1'b0;
	BUS[14] = #70000 1'b1;
	BUS[14] = #80000 1'b0;
end 
// BUS[ 13 ]
initial
begin
	BUS[13] = 1'b0;
	BUS[13] = #70000 1'b1;
	BUS[13] = #80000 1'b0;
end 
// BUS[ 12 ]
initial
begin
	BUS[12] = 1'b0;
end 
// BUS[ 11 ]
initial
begin
	BUS[11] = 1'b0;
end 
// BUS[ 10 ]
initial
begin
	BUS[10] = 1'b0;
end 
// BUS[ 9 ]
initial
begin
	BUS[9] = 1'b1;
	BUS[9] = #70000 1'b0;
end 
// BUS[ 8 ]
initial
begin
	BUS[8] = 1'b1;
	BUS[8] = #70000 1'b0;
end 
// BUS[ 7 ]
initial
begin
	BUS[7] = 1'b1;
	BUS[7] = #70000 1'b0;
end 
// BUS[ 6 ]
initial
begin
	BUS[6] = 1'b0;
end 
// BUS[ 5 ]
initial
begin
	BUS[5] = 1'b0;
end 
// BUS[ 4 ]
initial
begin
	BUS[4] = 1'b0;
end 
// BUS[ 3 ]
initial
begin
	BUS[3] = 1'b1;
	BUS[3] = #70000 1'b0;
end 
// BUS[ 2 ]
initial
begin
	BUS[2] = 1'b0;
end 
// BUS[ 1 ]
initial
begin
	BUS[1] = 1'b0;
end 
// BUS[ 0 ]
initial
begin
	BUS[0] = 1'b0;
end 

// selMDR
initial
begin
	selMDR = 1'b0;
end 

// memWE
initial
begin
	memWE = 1'b0;
	memWE = #150000 1'b1;
	memWE = #70000 1'b0;
end 

// ldMAR
initial
begin
	ldMAR = 1'b1;
	ldMAR = #70000 1'b0;
end 

// ldMDR
initial
begin
	ldMDR = 1'b0;
	ldMDR = #70000 1'b1;
	ldMDR = #80000 1'b0;
end 

// clkExt
always
begin
	clkExt = 1'b0;
	clkExt = #5000 1'b1;
	#5000;
end 
// memDataExt[ 15 ]
initial
begin
	memDataExt[15] = 1'b0;
end 
// memDataExt[ 14 ]
initial
begin
	memDataExt[14] = 1'b0;
end 
// memDataExt[ 13 ]
initial
begin
	memDataExt[13] = 1'b0;
end 
// memDataExt[ 12 ]
initial
begin
	memDataExt[12] = 1'b0;
end 
// memDataExt[ 11 ]
initial
begin
	memDataExt[11] = 1'b0;
end 
// memDataExt[ 10 ]
initial
begin
	memDataExt[10] = 1'b0;
end 
// memDataExt[ 9 ]
initial
begin
	memDataExt[9] = 1'b0;
end 
// memDataExt[ 8 ]
initial
begin
	memDataExt[8] = 1'b0;
end 
// memDataExt[ 7 ]
initial
begin
	memDataExt[7] = 1'b0;
end 
// memDataExt[ 6 ]
initial
begin
	memDataExt[6] = 1'b0;
end 
// memDataExt[ 5 ]
initial
begin
	memDataExt[5] = 1'b0;
end 
// memDataExt[ 4 ]
initial
begin
	memDataExt[4] = 1'b0;
end 
// memDataExt[ 3 ]
initial
begin
	memDataExt[3] = 1'b0;
end 
// memDataExt[ 2 ]
initial
begin
	memDataExt[2] = 1'b0;
end 
// memDataExt[ 1 ]
initial
begin
	memDataExt[1] = 1'b0;
end 
// memDataExt[ 0 ]
initial
begin
	memDataExt[0] = 1'b0;
end 
// memAddrExt[ 15 ]
initial
begin
	memAddrExt[15] = 1'b0;
end 
// memAddrExt[ 14 ]
initial
begin
	memAddrExt[14] = 1'b0;
end 
// memAddrExt[ 13 ]
initial
begin
	memAddrExt[13] = 1'b0;
end 
// memAddrExt[ 12 ]
initial
begin
	memAddrExt[12] = 1'b0;
end 
// memAddrExt[ 11 ]
initial
begin
	memAddrExt[11] = 1'b0;
end 
// memAddrExt[ 10 ]
initial
begin
	memAddrExt[10] = 1'b0;
end 
// memAddrExt[ 9 ]
initial
begin
	memAddrExt[9] = 1'b1;
end 
// memAddrExt[ 8 ]
initial
begin
	memAddrExt[8] = 1'b1;
end 
// memAddrExt[ 7 ]
initial
begin
	memAddrExt[7] = 1'b1;
end 
// memAddrExt[ 6 ]
initial
begin
	memAddrExt[6] = 1'b0;
end 
// memAddrExt[ 5 ]
initial
begin
	memAddrExt[5] = 1'b0;
end 
// memAddrExt[ 4 ]
initial
begin
	memAddrExt[4] = 1'b0;
end 
// memAddrExt[ 3 ]
initial
begin
	memAddrExt[3] = 1'b1;
end 
// memAddrExt[ 2 ]
initial
begin
	memAddrExt[2] = 1'b0;
end 
// memAddrExt[ 1 ]
initial
begin
	memAddrExt[1] = 1'b0;
end 
// memAddrExt[ 0 ]
initial
begin
	memAddrExt[0] = 1'b0;
end 

// memWEExt
initial
begin
	memWEExt = 1'b0;
end 
endmodule

