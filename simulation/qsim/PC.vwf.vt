// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/15/2023 23:17:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] BUS;
reg [15:0] EAB;
reg clk;
reg ldPC;
reg rst;
reg [1:0] selPCMUX;
// wires                                               
wire [15:0] PCOut;

// assign statements (if any)                          
PC i1 (
// port map - connection between master ports and signals/registers   
	.BUS(BUS),
	.EAB(EAB),
	.PCOut(PCOut),
	.clk(clk),
	.ldPC(ldPC),
	.rst(rst),
	.selPCMUX(selPCMUX)
);
initial 
begin 
#1000000 $finish;
end 
// BUS[ 15 ]
initial
begin
	BUS[15] = 1'b0;
end 
// BUS[ 14 ]
initial
begin
	BUS[14] = 1'b0;
end 
// BUS[ 13 ]
initial
begin
	BUS[13] = 1'b1;
end 
// BUS[ 12 ]
initial
begin
	BUS[12] = 1'b0;
end 
// BUS[ 11 ]
initial
begin
	BUS[11] = 1'b0;
end 
// BUS[ 10 ]
initial
begin
	BUS[10] = 1'b1;
end 
// BUS[ 9 ]
initial
begin
	BUS[9] = 1'b0;
end 
// BUS[ 8 ]
initial
begin
	BUS[8] = 1'b0;
end 
// BUS[ 7 ]
initial
begin
	BUS[7] = 1'b1;
end 
// BUS[ 6 ]
initial
begin
	BUS[6] = 1'b0;
end 
// BUS[ 5 ]
initial
begin
	BUS[5] = 1'b0;
end 
// BUS[ 4 ]
initial
begin
	BUS[4] = 1'b1;
end 
// BUS[ 3 ]
initial
begin
	BUS[3] = 1'b0;
end 
// BUS[ 2 ]
initial
begin
	BUS[2] = 1'b0;
end 
// BUS[ 1 ]
initial
begin
	BUS[1] = 1'b1;
end 
// BUS[ 0 ]
initial
begin
	BUS[0] = 1'b0;
end 
// EAB[ 15 ]
initial
begin
	EAB[15] = 1'b1;
end 
// EAB[ 14 ]
initial
begin
	EAB[14] = 1'b0;
end 
// EAB[ 13 ]
initial
begin
	EAB[13] = 1'b0;
end 
// EAB[ 12 ]
initial
begin
	EAB[12] = 1'b1;
end 
// EAB[ 11 ]
initial
begin
	EAB[11] = 1'b0;
end 
// EAB[ 10 ]
initial
begin
	EAB[10] = 1'b0;
end 
// EAB[ 9 ]
initial
begin
	EAB[9] = 1'b1;
end 
// EAB[ 8 ]
initial
begin
	EAB[8] = 1'b0;
end 
// EAB[ 7 ]
initial
begin
	EAB[7] = 1'b0;
end 
// EAB[ 6 ]
initial
begin
	EAB[6] = 1'b1;
end 
// EAB[ 5 ]
initial
begin
	EAB[5] = 1'b0;
end 
// EAB[ 4 ]
initial
begin
	EAB[4] = 1'b0;
end 
// EAB[ 3 ]
initial
begin
	EAB[3] = 1'b1;
end 
// EAB[ 2 ]
initial
begin
	EAB[2] = 1'b0;
end 
// EAB[ 1 ]
initial
begin
	EAB[1] = 1'b0;
end 
// EAB[ 0 ]
initial
begin
	EAB[0] = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// ldPC
initial
begin
	ldPC = 1'b0;
	ldPC = #60000 1'b1;
	ldPC = #40000 1'b0;
	ldPC = #80000 1'b1;
	ldPC = #80000 1'b0;
	ldPC = #80000 1'b1;
	ldPC = #80000 1'b0;
	ldPC = #80000 1'b1;
	ldPC = #80000 1'b0;
	ldPC = #40000 1'b1;
	ldPC = #160000 1'b0;
end 
// selPCMUX[ 1 ]
initial
begin
	selPCMUX[1] = 1'b0;
	selPCMUX[1] = #460000 1'b1;
	selPCMUX[1] = #80000 1'b0;
end 
// selPCMUX[ 0 ]
initial
begin
	selPCMUX[0] = 1'b0;
	selPCMUX[0] = #300000 1'b1;
	selPCMUX[0] = #80000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #690000 1'b1;
	rst = #10000 1'b0;
	rst = #50000 1'b1;
	rst = #20000 1'b0;
end 
endmodule

